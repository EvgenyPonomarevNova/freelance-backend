// test-all.js
const axios = require('axios');

const API_BASE = 'http://localhost:3001/api';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è axios
const client = axios.create({
  baseURL: API_BASE,
  headers: {
    'Content-Type': 'application/json'
  },
  timeout: 10000
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
let clientToken = '';
let freelancerToken = '';
let testProjectId = '';
let testResponseId = '';
let clientUserId = '';
let freelancerUserId = '';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function logTest(name, success, data = null, error = null) {
  const emoji = success ? '‚úÖ' : '‚ùå';
  console.log(`${emoji} ${name}`);
  if (data && typeof data === 'object') {
    console.log(`   –î–∞–Ω–Ω—ã–µ:`, JSON.stringify(data, null, 2).split('\n').slice(0, 3).join('\n   '));
  } else if (data) {
    console.log(`   –î–∞–Ω–Ω—ã–µ: ${data}`);
  }
  if (error) {
    if (typeof error === 'object') {
      console.log(`   –û—à–∏–±–∫–∞: ${error.message || JSON.stringify(error)}`);
    } else {
      console.log(`   –û—à–∏–±–∫–∞: ${error}`);
    }
  }
  console.log(''); // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function runAllTests() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API\n');
  console.log('='.repeat(50));

  try {
    // 0. –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ï–†–ê
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ï–†–ê');
    console.log('-'.repeat(30));

    try {
      const healthResponse = await client.get('/health');
      logTest('Health check —Å–µ—Ä–≤–µ—Ä–∞', true, {
        status: healthResponse.data.status,
        database: healthResponse.data.database,
        environment: healthResponse.data.environment
      });
    } catch (error) {
      logTest('Health check —Å–µ—Ä–≤–µ—Ä–∞', false, null, '–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001: node server.js');
      return;
    }

    // 1. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
    console.log('\nüîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò');
    console.log('-'.repeat(30));

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    const clientEmail = `client${Date.now()}@test.com`;
    try {
      const registerResponse = await client.post('/auth/register', {
        email: clientEmail,
        password: 'password123',
        fullName: 'Test Client',
        role: 'client'
      });
      clientToken = registerResponse.data.token;
      clientUserId = registerResponse.data.user.id;
      logTest('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞', true, {
        email: clientEmail,
        userId: clientUserId,
        role: 'client'
      });
    } catch (error) {
      logTest('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞', false, null, error.response?.data || error.message);
    }

    await delay(500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞
    const freelancerEmail = `freelancer${Date.now()}@test.com`;
    try {
      const registerResponse = await client.post('/auth/register', {
        email: freelancerEmail,
        password: 'password123',
        fullName: 'Test Freelancer',
        role: 'freelancer'
      });
      freelancerToken = registerResponse.data.token;
      freelancerUserId = registerResponse.data.user.id;
      logTest('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞', true, {
        email: freelancerEmail,
        userId: freelancerUserId,
        role: 'freelancer'
      });
    } catch (error) {
      logTest('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞', false, null, error.response?.data || error.message);
    }

    await delay(500);

    // –õ–æ–≥–∏–Ω –∫–ª–∏–µ–Ω—Ç–∞
    try {
      const loginResponse = await client.post('/auth/login', {
        email: clientEmail,
        password: 'password123'
      });
      clientToken = loginResponse.data.token;
      logTest('–õ–æ–≥–∏–Ω –∫–ª–∏–µ–Ω—Ç–∞', true, {
        user: loginResponse.data.user.profile.name,
        role: loginResponse.data.user.role
      });
    } catch (error) {
      logTest('–õ–æ–≥–∏–Ω –∫–ª–∏–µ–Ω—Ç–∞', false, null, error.response?.data || error.message);
    }

    await delay(500);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      const tempClient = axios.create({
        baseURL: API_BASE,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${clientToken}`
        }
      });
      
      const meResponse = await tempClient.get('/auth/me');
      logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è', true, {
        name: meResponse.data.user.profile.name,
        email: meResponse.data.user.email
      });
    } catch (error) {
      logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è', false, null, error.response?.data || error.message);
    }

    // 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ï–ö–¢–û–í
    console.log('\nüìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ï–ö–¢–û–í');
    console.log('-'.repeat(30));

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    try {
      const projectData = {
        title: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API',
        description: '–ù—É–∂–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º React –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ –∏ Node.js –Ω–∞ –±—ç–∫–µ–Ω–¥–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –∫—Ä–∞—Å–∏–≤—ã–π UI.',
        category: 'development',
        budget: 75000,
        deadline: '2024-12-31',
        skills: ['JavaScript', 'React', 'Node.js', 'PostgreSQL', 'Express']
      };
      
      const tempClient = axios.create({
        baseURL: API_BASE,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${clientToken}`
        }
      });
      
      const createResponse = await tempClient.post('/projects', projectData);
      testProjectId = createResponse.data.project.id;
      logTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', true, {
        id: testProjectId,
        title: createResponse.data.project.title,
        budget: createResponse.data.project.budget,
        category: createResponse.data.project.category
      });
    } catch (error) {
      logTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', false, null, error.response?.data || error.message);
    }

    await delay(500);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    try {
      const projectsResponse = await client.get('/projects?limit=3');
      logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤', true, {
        found: projectsResponse.data.results,
        total: projectsResponse.data.total,
        pages: projectsResponse.data.pages
      });
    } catch (error) {
      logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤', false, null, error.response?.data || error.message);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID
    try {
      const projectResponse = await client.get(`/projects/${testProjectId}`);
      logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID', true, {
        title: projectResponse.data.project.title,
        views: projectResponse.data.project.views,
        status: projectResponse.data.project.status
      });
    } catch (error) {
      logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID', false, null, error.response?.data || error.message);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (–∫–ª–∏–µ–Ω—Ç–∞)
    try {
      const tempClient = axios.create({
        baseURL: API_BASE,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${clientToken}`
        }
      });
      
      const myProjectsResponse = await tempClient.get('/projects/client/my-projects');
      logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (–∫–ª–∏–µ–Ω—Ç)', true, {
        count: myProjectsResponse.data.results
      });
    } catch (error) {
      logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (–∫–ª–∏–µ–Ω—Ç)', false, null, error.response?.data || error.message);
    }

    // 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–ö–õ–ò–ö–û–í
    console.log('\nüíº –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–ö–õ–ò–ö–û–í');
    console.log('-'.repeat(30));

    // –û—Ç–∫–ª–∏–∫ –Ω–∞ –ø—Ä–æ–µ–∫—Ç (—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä)
    try {
      const responseData = {
        proposal: '–ì–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è –∑–∞ –ø—Ä–æ–µ–∫—Ç! –ò–º–µ—é –±–æ–≥–∞—Ç—ã–π –æ–ø—ã—Ç –≤ React –∏ Node.js. –í—ã–ø–æ–ª–Ω—é —Ä–∞–±–æ—Ç—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≤ —Å—Ä–æ–∫.',
        price: 70000,
        timeline: '3 –Ω–µ–¥–µ–ª–∏'
      };
      
      const tempClient = axios.create({
        baseURL: API_BASE,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${freelancerToken}`
        }
      });
      
      const respondResponse = await tempClient.post(`/projects/${testProjectId}/respond`, responseData);
      testResponseId = respondResponse.data.response.id;
      logTest('–û—Ç–∫–ª–∏–∫ –Ω–∞ –ø—Ä–æ–µ–∫—Ç (—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä)', true, {
        responseId: testResponseId,
        status: respondResponse.data.response.status,
        price: respondResponse.data.response.price
      });
    } catch (error) {
      logTest('–û—Ç–∫–ª–∏–∫ –Ω–∞ –ø—Ä–æ–µ–∫—Ç (—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä)', false, null, error.response?.data || error.message);
    }

    await delay(500);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ (—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä)
    try {
      const tempClient = axios.create({
        baseURL: API_BASE,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${freelancerToken}`
        }
      });
      
      const myResponses = await tempClient.get('/projects/my/responses');
      logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ (—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä)', true, {
        count: myResponses.data.results
      });
    } catch (error) {
      logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ (—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä)', false, null, error.response?.data || error.message);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞ (–∫–ª–∏–µ–Ω—Ç)
    try {
      const updateData = {
        status: 'accepted'
      };
      
      const tempClient = axios.create({
        baseURL: API_BASE,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${clientToken}`
        }
      });
      
      const updateResponse = await tempClient.patch(`/projects/${testProjectId}/responses/${testResponseId}`, updateData);
      logTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞ (–∫–ª–∏–µ–Ω—Ç)', true, {
        newStatus: updateResponse.data.response.status,
        message: updateResponse.data.message
      });
    } catch (error) {
      logTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞ (–∫–ª–∏–µ–Ω—Ç)', false, null, error.response?.data || error.message);
    }

    // 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    console.log('\nüë• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.log('-'.repeat(30));

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤
    try {
      const freelancersResponse = await client.get('/users/freelancers?limit=3');
      logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤', true, {
        found: freelancersResponse.data.results,
        total: freelancersResponse.data.total
      });
    } catch (error) {
      logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤', false, null, error.response?.data || error.message);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    try {
      const profileData = {
        name: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ò–º—è –ö–ª–∏–µ–Ω—Ç–∞',
        bio: '–≠—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–Ω–∏–º–∞—é—Å—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º–∏.',
        skills: ['Project Management', 'Testing', 'QA', 'Business Analysis'],
        category: 'development'
      };
      
      const tempClient = axios.create({
        baseURL: API_BASE,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${clientToken}`
        }
      });
      
      const updateResponse = await tempClient.patch('/users/profile', profileData);
      logTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞', true, {
        newName: updateResponse.data.user.profile.name,
        skills: updateResponse.data.user.profile.skills.length
      });
    } catch (error) {
      logTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞', false, null, error.response?.data || error.message);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    try {
      const userProfile = await client.get(`/users/${clientUserId}`);
      logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ ID', true, {
        name: userProfile.data.user.profile.name,
        role: userProfile.data.user.role
      });
    } catch (error) {
      logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ ID', false, null, error.response?.data || error.message);
    }

    // 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò –ò –û–®–ò–ë–û–ö
    console.log('\n‚ö° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò –ò –û–®–ò–ë–û–ö');
    console.log('-'.repeat(30));

    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    try {
      const invalidData = {
        title: '–ö—Ä', // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        description: '–ö–æ—Ä–æ—Ç–∫–æ', // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        category: 'invalid-category', // –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        budget: 500 // –ë—é–¥–∂–µ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
      };
      
      const tempClient = axios.create({
        baseURL: API_BASE,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${clientToken}`
        }
      });
      
      await tempClient.post('/projects', invalidData);
      logTest('–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö', false, null, '–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –Ω–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        logTest('–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö', true, {
          status: '–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
          code: error.response.status
        });
      } else {
        logTest('–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö', false, null, error.response?.data || error.message);
      }
    }

    // –¢–µ—Å—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    try {
      const unauthorizedClient = axios.create({
        baseURL: API_BASE,
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      await unauthorizedClient.post('/projects', { title: 'test' });
      logTest('–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø', false, null, '–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ 401');
    } catch (error) {
      if (error.response && error.response.status === 401) {
        logTest('–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø', true, {
          status: '–ó–∞—â–∏—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç',
          code: error.response.status
        });
      } else {
        logTest('–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø', false, null, error.response?.data || error.message);
      }
    }

    console.log('\n' + '='.repeat(50));
    console.log('üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('='.repeat(50));
    console.log('\nüìä –°–≤–æ–¥–∫–∞:');
    console.log('‚Ä¢ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è');
    console.log('‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏');
    console.log('‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤');
    console.log('‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
    console.log('\nüöÄ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ API –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã!');

  } catch (error) {
    console.log('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
runAllTests();