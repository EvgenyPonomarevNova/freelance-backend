// routes/auth.js
const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const { User } = require('../models');
const { Op } = require('sequelize');


router.get('/', (req, res) => {
  res.json({ 
    message: 'Auth API is working!',
    timestamp: new Date(),
    availableEndpoints: [
      'POST /api/auth/register',
      'POST /api/auth/login',
      'POST /api/auth/oauth/yandex/login'
    ]
  });
});
// üî• –ü–†–û–°–¢–û–ô –¢–ï–°–¢–û–í–´–ô –†–û–£–¢ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò
router.get('/test', (req, res) => {
  res.json({ 
    message: 'Auth routes are working!', 
    timestamp: new Date(),
    availableEndpoints: [
      'POST /api/auth/register',
      'POST /api/auth/login', 
      'POST /api/auth/oauth/yandex/login'
    ]
  });
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/register', async (req, res) => {
  try {
    console.log('üìù Registration attempt:', req.body);
    
    const { email, password, fullName, role } = req.body;

    if (!email || !password || !fullName) {
      return res.status(400).json({
        success: false,
        error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      return res.status(400).json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.create({
      email,
      fullName,
      role: role || 'freelancer',
      passwordHash: password,
      profile: {
        isEmailVerified: false
      },
      isOAuth: false
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { userId: user.id, email: user.email, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: process.env.JWT_EXPIRES_IN }
    );

    console.log('‚úÖ User registered:', user.email);
    
    res.status(201).json({
      success: true,
      token,
      user: user.toJSON()
    });

  } catch (error) {
    console.error('‚ùå Registration error:', error);
    res.status(400).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error.message
    });
  }
});

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/login', async (req, res) => {
  try {
    console.log('üîê Login attempt:', req.body);
    
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({
        success: false,
        error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ where: { email } });
    if (!user) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await user.checkPassword(password);
    if (!isPasswordValid) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { userId: user.id, email: user.email, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: process.env.JWT_EXPIRES_IN }
    );

    console.log('‚úÖ User logged in:', user.email);
    
    res.json({
      success: true,
      token,
      user: user.toJSON()
    });

  } catch (error) {
    console.error('‚ùå Login error:', error);
    res.status(400).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: ' + error.message
    });
  }
});

// –Ø–Ω–¥–µ–∫—Å OAuth - –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
router.post('/oauth/yandex/login', async (req, res) => {
  try {
    const { code } = req.body;
    
    console.log('üîê Yandex OAuth attempt with code:', code);

    if (!code) {
      return res.status(400).json({
        success: false,
        error: 'Authorization code is required'
      });
    }

    // üî• –†–ï–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê OAuth
    if (code.startsWith('demo_')) {
      // –î–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      return handleDemoOAuth(res, code);
    } else {
      // –†–µ–∞–ª—å–Ω–∞—è OAuth –ª–æ–≥–∏–∫–∞ —Å –Ø–Ω–¥–µ–∫—Å API
      return await handleRealYandexOAuth(res, code);
    }

  } catch (error) {
    console.error('‚ùå Yandex OAuth error:', error);
    res.status(400).json({
      success: false,
      error: 'OAuth authentication failed: ' + error.message
    });
  }
});

// üî• –î–ï–ú–û-–†–ï–ñ–ò–ú OAuth
function handleDemoOAuth(res, code) {
  console.log('üîÑ Using demo OAuth mode');
  
  // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const demoUser = {
    email: `yandex.demo.${Date.now()}@example.com`,
    fullName: '–î–µ–º–æ –Ø–Ω–¥–µ–∫—Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    role: 'freelancer',
    profile: {
      avatar: null,
      bio: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å OAuth',
      skills: ['JavaScript', 'React', 'Node.js'],
      rating: 4.8,
      completedProjects: 5,
      isEmailVerified: true,
      oauthProvider: 'yandex',
      yandexId: `demo_yandex_${Date.now()}`
    },
    isOAuth: true
  };

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
  createOrUpdateOAuthUser(demoUser, res);
}

// üî• –†–ï–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –Ø–Ω–¥–µ–∫—Å OAuth
async function handleRealYandexOAuth(res, code) {
  console.log('üîÑ Using real Yandex OAuth');
  
  try {
    // 1. –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ access token
    const tokenResponse = await fetch('https://oauth.yandex.ru/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        grant_type: 'authorization_code',
        code: code,
        client_id: process.env.YANDEX_CLIENT_ID,
        client_secret: process.env.YANDEX_CLIENT_SECRET,
        redirect_uri: process.env.YANDEX_REDIRECT_URI
      })
    });

    if (!tokenResponse.ok) {
      throw new Error(`Yandex token exchange failed: ${tokenResponse.status}`);
    }

    const tokenData = await tokenResponse.json();
    const accessToken = tokenData.access_token;

    // 2. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userResponse = await fetch('https://login.yandex.ru/info?format=json', {
      headers: {
        'Authorization': `OAuth ${accessToken}`
      }
    });

    if (!userResponse.ok) {
      throw new Error(`Yandex user info failed: ${userResponse.status}`);
    }

    const yandexUser = await userResponse.json();
    
    console.log('üìß Yandex user data received:', {
      id: yandexUser.id,
      email: yandexUser.default_email,
      name: yandexUser.real_name || yandexUser.display_name
    });

    // 3. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = {
      email: yandexUser.default_email,
      fullName: yandexUser.real_name || yandexUser.display_name || yandexUser.first_name || 'Yandex User',
      role: 'freelancer',
      profile: {
        avatar: yandexUser.default_avatar_id ? 
          `https://avatars.yandex.net/get-yapic/${yandexUser.default_avatar_id}/islands-200` : null,
        bio: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ø–Ω–¥–µ–∫—Å OAuth',
        skills: [],
        rating: 5.0,
        completedProjects: 0,
        isEmailVerified: true,
        oauthProvider: 'yandex',
        yandexId: yandexUser.id
      },
      isOAuth: true
    };

    await createOrUpdateOAuthUser(userData, res);

  } catch (error) {
    console.error('‚ùå Real Yandex OAuth failed:', error);
    
    // Fallback to demo mode if real OAuth fails
    console.log('üîÑ Falling back to demo mode');
    handleDemoOAuth(res, 'demo_fallback');
  }
}

// üî• –û–ë–©–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø/–û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async function createOrUpdateOAuthUser(userData, res) {
  try {
    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏–ª–∏ yandexId
    let user = await User.findOne({
      where: {
        [Op.or]: [
          { email: userData.email },
          { 'profile.yandexId': userData.profile.yandexId }
        ]
      }
    });

    if (user) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üîÑ Updating existing OAuth user:', user.email);
      
      user.profile = {
        ...user.profile,
        ...userData.profile,
        oauthProvider: 'yandex'
      };
      user.isOAuth = true;
      
      await user.save();
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üÜï Creating new OAuth user:', userData.email);
      
      user = await User.create({
        email: userData.email,
        fullName: userData.fullName,
        role: userData.role,
        passwordHash: null, // OAuth users don't have password
        profile: userData.profile,
        isOAuth: true
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { 
        userId: user.id, 
        email: user.email, 
        role: user.role 
      },
      process.env.JWT_SECRET,
      { expiresIn: process.env.JWT_EXPIRES_IN }
    );

    console.log('‚úÖ OAuth user processed:', user.email);

    res.json({
      success: true,
      token,
      user: {
        id: user.id,
        email: user.email,
        fullName: user.fullName,
        role: user.role,
        profile: user.profile,
        isOAuth: true,
        createdAt: user.created_at,
        updatedAt: user.updated_at
      },
      isDemo: userData.email.includes('demo')
    });

  } catch (error) {
    console.error('‚ùå OAuth user creation failed:', error);
    throw error;
  }
}

module.exports = router;